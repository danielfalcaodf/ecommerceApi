name: Usuários
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/users
    metadata:
      title: 'Buscar todos os usuários'
      description: 'Apresenta uma lista de todos os usuários com as informações'
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"type":"error","code":401,"massage":"Token is Invalid"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '37'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/users/me
    metadata:
      title: 'Buscar usuário JWT'
      description: 'Apresenta as informações do usuário logado que foi passado com JWT'
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"type":"error","code":401,"massage":"Token is Invalid"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '36'
          access-control-allow-origin: '*'
        description: null
    responseFields: []
  -
    httpMethods:
      - PUT
    uri: api/users/me/edit
    metadata:
      title: 'Editar usuário JWT'
      description: 'Alterar dados do usuário logado que foi passado com JWT, se tudo estiver certo apresenta as informações do usuário'
      authenticated: true
    headers:
      Authorization: 'Bearer {ACCESS_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Um nome do usuário.'
        required: true
        example: omnis
        type: string
      email:
        name: email
        description: 'Email do usuário que não existe no banco de dados.'
        required: true
        example: quia
        type: string
    responses: []
    responseFields: []
